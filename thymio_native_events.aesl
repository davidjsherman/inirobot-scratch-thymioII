<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="8" name="thymioII_leds_prox_h"/>
<event size="8" name="thymioII_leds_circle"/>
<event size="3" name="thymioII_leds_top"/>
<event size="4" name="thymioII_leds_bottom"/>
<event size="2" name="thymioII_leds_prox_v"/>
<event size="4" name="thymioII_leds_buttons"/>
<event size="1" name="thymioII_leds_rc"/>
<event size="2" name="thymioII_leds_temperature"/>
<event size="1" name="thymioII_leds_sound"/>
<event size="2" name="thymioII_sound_freq"/>
<event size="1" name="thymioII_sound_play"/>
<event size="1" name="thymioII_sound_system"/>
<event size="1" name="thymioII_sound_replay"/>
<event size="32" name="thymioII_sound_wave"/>
<event size="1" name="thymioII_sound_record"/>
<event size="1" name="scratch_set_dial"/>
<event size="0" name="scratch_next_dial"/>
<event size="1" name="scratch_next_dial_limit"/>
<event size="4" name="Q_enqueue"/>
<event size="1" name="scratch_move"/>
<event size="1" name="scratch_turn"/>
<event size="2" name="scratch_arc"/>
<event size="2" name="scratch_start"/>
<event size="0" name="scratch_stop"/>
<event size="2" name="scratch_changeSpeed"/>


<!--list of constants-->
<constant value="8" name="QUEUE"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">### Scratch personality for Thymio-II
### David J Sherman - david.sherman@inria.fr
### 
### 1. Local state: dial spinner, motion queue
### 2. Motion update at 16Hz triggered by acc
### 3. Provide high-level Scratch events scratch_*
### 4. Expose native functions as sevent thymioII_*


### Variables for additional local state
## spinning dial 
var scratch_dial = 1
var scr_tmp[9] # reusable temp for event handlers

## simple queue for motion commands
var QtpL[QUEUE] = [ 0,0,0,0,0,0,0,0 ] # target dist L
var QtpR[QUEUE] = [ 0,0,0,0,0,0,0,0 ] # target dist R
var QdL[QUEUE]  = [ 0,0,0,0,0,0,0,0 ] # motor speed L
var QdR[QUEUE]  = [ 0,0,0,0,0,0,0,0 ] # motor speed R
var Qpc = 0                           # program counter
var Qnx = 1                           # next queue position
var Qwait = 1                         # delay between changes


### Motion update
## Every 16 Hz tick from acc event: if queue is active,
## check progress towards current left- and right-motor motion goals

onevent acc # loop runs at 16 Hz
if	Qpc >= 0 and Qwait == 0 then
	if	(QtpL[Qpc] != 0 or QtpR[Qpc] != 0) then
		# progress towards goal
		QtpL[Qpc] -= motor.left.speed # use measured speed
		if	abs(QtpL[Qpc]) >= abs(QdL[Qpc]) then
			motor.left.target = QdL[Qpc]
		else
			motor.left.target = 0
			QtpL[Qpc] = 0
			#Qwait = 2 # allow 1/8 sec for deceleration
		end
		QtpR[Qpc] -= motor.right.speed # use measured speed
		if 	abs(QtpR[Qpc]) >= abs(QdR[Qpc]) then
			motor.right.target = QdR[Qpc]
		else
			motor.right.target = 0
			QtpR[Qpc] = 0
			#Qwait = 2 # allow 1/8 sec for deceleration
		end
	else
		# scan forward in the queue
		Qpc = (Qpc+1)%QUEUE
	end
elseif	Qwait > 0 then
	Qwait -= 1
end

## Add new goal to the queue at position Qnx

sub Q_enqueue
QtpL[Qnx] = scr_tmp[0]
QtpR[Qnx] = scr_tmp[1]
QdL[Qnx]  = scr_tmp[2]
QdR[Qnx]  = scr_tmp[3]
Qnx = (Qnx+1)%QUEUE
if  Qpc &lt; 0 then
	Qpc = Qnx
end

onevent Q_enqueue
scr_tmp[0:3] = event.args[0:3]
callsub Q_enqueue

### Scratch events
## scratch_move/:mm
onevent scratch_move
scr_tmp[0] = event.args[0] * 50
call math.min(scr_tmp[2],event.args[0],150)
call math.max(scr_tmp[2],scr_tmp[2],20)
call math.muldiv(scr_tmp[2],scr_tmp[2],32,10)
scr_tmp[0:3] = [ scr_tmp[0],scr_tmp[0], scr_tmp[2],scr_tmp[2] ]
callsub Q_enqueue

## scratch_turn/:degrees
onevent scratch_turn
scr_tmp[0] = abs(event.args[0])
# dist = 39.76 * degrees + 1.225 * speed - 96.57
if	scr_tmp[0]>90 then
	scr_tmp[2] = 207
	call math.muldiv(scr_tmp[0], scr_tmp[0], 3976, 100)
	scr_tmp[0] += 157
else
	scr_tmp[2] = 138
	call math.muldiv(scr_tmp[0], scr_tmp[0], 3976, 100)
	scr_tmp[0] += 73
end
if  event.args[0] &lt; 0 then
	scr_tmp[0:3] = [ -scr_tmp[0],scr_tmp[0], -scr_tmp[2],scr_tmp[2] ]
else
	scr_tmp[0:3] = [ scr_tmp[0],-scr_tmp[0], scr_tmp[2],-scr_tmp[2] ]
end
callsub Q_enqueue

## scratch_arc/:radius/:degrees
onevent scratch_arc
# ratio
call math.muldiv(scr_tmp[7], 10000, abs(event.args[0])-95, abs(event.args[0]))
# scr_tmp[0] is distance to travel
scr_tmp[4] = abs(event.args[1]) # degrees; pi/180 ~ 35/2000
call math.muldiv(scr_tmp[4], scr_tmp[4]*35, abs(event.args[0]), 2000) 
call math.muldiv(scr_tmp[5], scr_tmp[4], scr_tmp[7], 10000)
# scr_tmp[3] is speed &lt;= 500
call math.muldiv(scr_tmp[6], 400, scr_tmp[7], 10000)
#
call math.muldiv(scr_tmp[8], abs(event.args[1]),abs(event.args[0]), 10)
if scr_tmp[8] &lt; 3714 then
	scr_tmp[7] = 1
	scr_tmp[4] *= 50
	scr_tmp[5] *= 50
else
	scr_tmp[7] = 5
	scr_tmp[4] *= 10
	scr_tmp[5] *= 10
end
while scr_tmp[7] > 0 do
	if  event.args[1] &lt; 0 then
		scr_tmp[0:3] = [ scr_tmp[5],scr_tmp[4], scr_tmp[6],400 ]
	else
		scr_tmp[0:3] = [ scr_tmp[4],scr_tmp[5], 400,scr_tmp[6] ]
	end
	if  event.args[0] &lt; 0 then
		scr_tmp[0:3] = [ -scr_tmp[0], -scr_tmp[1], -scr_tmp[2], -scr_tmp[3] ]
	end
	callsub Q_enqueue
	scr_tmp[7] -= 1
end

## scratch_start/:left/:right
onevent scratch_start
call math.muldiv(scr_tmp[0], event.args[0], 32, 10)
call math.muldiv(scr_tmp[1], event.args[1], 32, 10)
motor.left.target = scr_tmp[0]
motor.right.target = scr_tmp[1]

## scratch_stop
onevent scratch_stop
motor.left.target = 0
motor.right.target = 0

## scratch_changeSpeed/:left/:right
onevent scratch_changeSpeed
call math.muldiv(scr_tmp[0], event.args[0], 32, 10)
call math.muldiv(scr_tmp[1], event.args[1], 32, 10)
motor.left.target += scr_tmp[0]
motor.right.target += scr_tmp[1]

## scratch_avoid

## scratch_setLeds

## scratch_changeLeds

## scratch_clearLeds


## costume is a clock dial using the circle LEDs
sub scratch_dial_set_leds
scr_tmp[0:7] = [0,0,0,0,0,0,0,0]
scr_tmp[(scratch_dial % 8)] = 8
if (scratch_dial / 8) % 9 > 0 then
	scr_tmp[((scratch_dial / 8) % 9) - 1] = 24
end
if (scratch_dial / 72) % 9 > 0 then
	scr_tmp[((scratch_dial / 72) % 9) - 1] = 32
end
call leds.circle(scr_tmp[0],scr_tmp[1],scr_tmp[2],scr_tmp[3],scr_tmp[4],scr_tmp[5],scr_tmp[6],scr_tmp[7])

## scratch_set_dial
onevent scratch_set_dial
scratch_dial = event.args[0]
callsub scratch_dial_set_leds

## scratch_next_dial
onevent scratch_next_dial
scratch_dial = (scratch_dial + 1) % 8
callsub scratch_dial_set_leds

## scratch_next_dial_limit
onevent scratch_next_dial_limit # up to 648 = 9 * 9 * 8
scratch_dial = (scratch_dial + 1) % event.args[0]
callsub scratch_dial_set_leds


### Events to expose Aseba native functions as events

## Event handlers for native functions
onevent thymioII_leds_bottom #
if event.args[0]==0 then
	call leds.bottom.left(event.args[1],event.args[2],event.args[3])
else
	call leds.bottom.right(event.args[1],event.args[2],event.args[3])
end

onevent thymioII_leds_buttons #
call leds.buttons(event.args[0],event.args[1],
                  event.args[2],event.args[3])

onevent thymioII_leds_circle #
call leds.circle(event.args[0],event.args[1],event.args[2],
	             event.args[3],event.args[4],event.args[5],
	             event.args[6],event.args[7])

onevent thymioII_leds_prox_h #
call leds.prox.h(event.args[0],event.args[1],event.args[2],
	             event.args[3],event.args[4],event.args[5],
	             event.args[6],event.args[7])

onevent thymioII_leds_prox_v #
call leds.prox.v(event.args[0],event.args[1])

onevent thymioII_leds_rc #
call leds.rc(event.args[0])

onevent thymioII_leds_sound #
call leds.sound(event.args[0])

onevent thymioII_leds_temperature #
call leds.temperature(event.args[0],event.args[1])

onevent thymioII_leds_top #
call leds.top(event.args[0],event.args[1],event.args[2])

onevent thymioII_sound_freq #
call sound.freq(event.args[0],event.args[1])

onevent thymioII_sound_play #
call sound.play(event.args[0])

onevent thymioII_sound_record #
call sound.record(event.args[0])

onevent thymioII_sound_replay #
call sound.replay(event.args[0])

onevent thymioII_sound_system #
call sound.system(event.args[0])

onevent thymioII_sound_wave #
#for scr_tmp[0] in 0:141 do
#	thymioII_wave[scr_tmp[0]] = event.args[scr_tmp[0] % 32]
#end
#call sound.wave(thymioII_wave)</node>


</network>
